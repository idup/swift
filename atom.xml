<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Swift语言基础]]></title>
  <subtitle><![CDATA[学在开始iOS应用开发之前]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://swift.idup.club/"/>
  <updated>2015-12-08T10:48:12.000Z</updated>
  <id>http://swift.idup.club/</id>
  
  <author>
    <name><![CDATA[iDUP Club]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[十. 持久化数据]]></title>
    <link href="http://swift.idup.club/2015/12/04/10-Persist-data/"/>
    <id>http://swift.idup.club/2015/12/04/10-Persist-data/</id>
    <published>2015-12-04T04:00:00.000Z</published>
    <updated>2015-12-08T10:48:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="保存并加载Meal">保存并加载Meal</h3><h5 id="实现代码键结构">实现代码键结构</h5><p>打开 Meal.swift，在// MARK: Properties下面增加如下结构<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Types</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PropertyKey</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> nameKey = <span class="string">"name"</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">let</span> photoKey = <span class="string">"photo"</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">let</span> ratingKey = <span class="string">"rating"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 Meal.swift中找到Meal class行,修改为<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meal</span>: <span class="typename">NSObject</span>, <span class="typename">NSCoding &#123;</span></span></span><br></pre></td></tr></table></figure></p>
<h5 id="实现encodeWithCoder方法">实现encodeWithCoder方法</h5><p>打开Meal.swift，在代码最后一个 { 前面增加如下代码<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">func encodeWithCoder(aCoder: NSCoder) &#123;</span><br><span class="line">    aCoder<span class="string">.encodeObject(name</span>, forKey: PropertyKey<span class="string">.nameKey)</span></span><br><span class="line">    aCoder<span class="string">.encodeObject(photo</span>, forKey: PropertyKey<span class="string">.photoKey)</span></span><br><span class="line">    aCoder<span class="string">.encodeInteger(rating</span>, forKey: PropertyKey<span class="string">.ratingKey)</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h5 id="初始化加载meal">初始化加载meal</h5><p>在encodeWithCoder(_:)方法前，增加代码<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = aDecoder.decodeObjectForKey(<span class="type">PropertyKey</span>.nameKey) <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Because photo is an optional property of Meal, use conditional cast.</span></span><br><span class="line">    <span class="keyword">let</span> photo = aDecoder.decodeObjectForKey(<span class="type">PropertyKey</span>.photoKey) <span class="keyword">as</span>? <span class="type">UIImage</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rating = aDecoder.decodeIntegerForKey(<span class="type">PropertyKey</span>.ratingKey)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Must call designated initializer.</span></span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>(name: name, photo: photo, rating: rating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="更新初始化实现来调用父类的初始化">更新初始化实现来调用父类的初始化</h5><p>找到initializer并修改为如下<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">init?(<span class="built_in">name</span>: String, photo: UIImage?, <span class="built_in">rating</span>: Int) &#123;</span><br><span class="line">    <span class="comment">// Initialize stored properties.</span></span><br><span class="line">    self.<span class="built_in">name</span> = <span class="built_in">name</span></span><br><span class="line">    self.photo = photo</span><br><span class="line">    self.<span class="built_in">rating</span> = <span class="built_in">rating</span></span><br><span class="line"></span><br><span class="line">    super.init()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialization should fail if there is no name or if the rating is negative.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">name</span>.isEmpty || <span class="built_in">rating</span> &lt; <span class="number">0</span> &#123;</span><br><span class="line">        return <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="创建数据的文件路径">创建数据的文件路径</h5><p>在 Meal.swift中，在 // MARK: Properties部分下面，增加如下代码</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Archiving Paths</span></span><br><span class="line"></span><br><span class="line">static let DocumentsDirectory = <span class="function"><span class="title">NSFileManager</span><span class="params">()</span></span>.<span class="function"><span class="title">URLsForDirectory</span><span class="params">(.DocumentDirectory, inDomains: .UserDomainMask)</span></span>.first!</span><br><span class="line">static let ArchiveURL = DocumentsDirectory.<span class="function"><span class="title">URLByAppendingPathComponent</span><span class="params">(<span class="string">"meals"</span>)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="保存并加载meal列表">保存并加载meal列表</h3><h5 id="实现保存meal_list的方法">实现保存meal list的方法</h5><p>打开MealTableViewController.swift，在最后一个 } 前增加如下代码<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">saveMeals</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> isSuccessfulSave = <span class="type">NSKeyedArchiver</span>.archiveRootObject(meals, toFile: <span class="type">Meal</span>.<span class="type">ArchiveURL</span>.path!)</span><br><span class="line">    <span class="keyword">if</span> !isSuccessfulSave &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Failed to save meals..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="实现加载meal_list的方法">实现加载meal list的方法</h5><p>打开MealTableViewController.swift，在最后一个 } 前增加如下代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">loadMeals</span><span class="params">()</span></span> -&gt; [<span class="type">Meal</span>]? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">NSKeyedUnarchiver</span>.unarchiveObjectWithFile(<span class="type">Meal</span>.<span class="type">ArchiveURL</span>.path!) <span class="keyword">as</span>? [<span class="type">Meal</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="保存列表当用户增加。移除或者编辑meal时">保存列表当用户增加。移除或者编辑meal时</h5><p>在MealTableViewController.swift中，找打unwindToMealList(_:)方法， 修改为<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">unwindToMealList</span><span class="params">(sender: UIStoryboardSegue)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> sourceViewController = sender.sourceViewController <span class="keyword">as</span>? <span class="type">MealViewController</span>, meal = sourceViewController.meal &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> selectedIndexPath = tableView.indexPathForSelectedRow &#123;</span><br><span class="line">            <span class="comment">// Update an existing meal.</span></span><br><span class="line">            meals[selectedIndexPath.row] = meal</span><br><span class="line">            tableView.reloadRowsAtIndexPaths([selectedIndexPath], withRowAnimation: .<span class="type">None</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Add a new meal.</span></span><br><span class="line">            <span class="keyword">let</span> newIndexPath = <span class="type">NSIndexPath</span>(forRow: meals.<span class="built_in">count</span>, inSection: <span class="number">0</span>)</span><br><span class="line">            meals.append(meal)</span><br><span class="line">            tableView.insertRowsAtIndexPaths([newIndexPath], withRowAnimation: .<span class="type">Bottom</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Save the meals.</span></span><br><span class="line">        saveMeals()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>找到tableView(_:commitEditingStyle:forRowAtIndexPath:) 方法，修改为<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Override to support editing the table view.</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> editingStyle == .<span class="type">Delete</span> &#123;</span><br><span class="line">        <span class="comment">// Delete the row from the data source</span></span><br><span class="line">        meals.removeAtIndex(indexPath.row)</span><br><span class="line">        saveMeals()</span><br><span class="line">        tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: .<span class="type">Fade</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> editingStyle == .<span class="type">Insert</span> &#123;</span><br><span class="line">        <span class="comment">// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="在合适时间加载_meal_list">在合适时间加载 meal list</h5><p>在MealTableViewController.swift中，找到viewDidLoad() 方法，修改为如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use the edit button item provided by the table view controller.</span></span><br><span class="line">    navigationItem.leftBarButtonItem = editButtonItem()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load any saved meals, otherwise load sample data.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> savedMeals = loadMeals() &#123;</span><br><span class="line">        meals += savedMeals</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Load the sample data.</span></span><br><span class="line">        loadSampleMeals()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="保存并加载Meal">保存并加载Meal</h3><h5 id="实现代码键结构">实现代码键结构</h5><p>打开 Meal.swift，在// MARK: Properties下面增加如下结构<br><figure class="highlight swif]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[九. 实现编辑和删除操作]]></title>
    <link href="http://swift.idup.club/2015/12/04/9-Implement-edit-and-delete-behavior/"/>
    <id>http://swift.idup.club/2015/12/04/9-Implement-edit-and-delete-behavior/</id>
    <published>2015-12-04T03:59:42.000Z</published>
    <updated>2015-12-08T14:57:05.000Z</updated>
    <content type="html"><![CDATA[<h3 id="允许编辑已经存在的Meals">允许编辑已经存在的Meals</h3><h5 id="配置table_view单元">配置table view单元</h5><p>打开Main.storyboard，选择table view cell，按住control并把它拖到meal scene中，在出现的Selection Segue中选择show选项</p>
<p><img src="/images/9-1.png" alt=""></p>
<p><img src="/images/9-2.png" alt=""></p>
<p>向下拖拽在meal list和meal scene之间的navigation controller，到出现新的segue结束</p>
<p><img src="/images/9-3.png" alt=""></p>
<p>选择最新添加的segue，在它的 Attributes inspector中的Identifier标签中输入ShowDetail</p>
<h5 id="确认哪一个segue_在发生">确认哪一个segue 在发生</h5><p>打开MealTableViewController.swift，找到prepareForSegue(_:sender:)方法，并修改为如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: - Navigation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In a storyboard-based application, you will often want to do a little preparation before navigation</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">prepareForSegue</span><span class="params">(segue: UIStoryboardSegue, sender: AnyObject?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> segue.identifier == <span class="string">"ShowDetail"</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> mealDetailViewController = segue.destinationViewController <span class="keyword">as</span>! <span class="type">MealViewController</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the cell that generated this segue.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> selectedMealCell = sender <span class="keyword">as</span>? <span class="type">MealTableViewCell</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> indexPath = tableView.indexPathForCell(selectedMealCell)!</span><br><span class="line">            <span class="keyword">let</span> selectedMeal = meals[indexPath.row]</span><br><span class="line">            mealDetailViewController.meal = selectedMeal</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> segue.identifier == <span class="string">"AddItem"</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Adding new meal."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="更新viewDidLoad的实现">更新viewDidLoad的实现</h5><p>找到 MealViewController.swift的viewDidLoad()方法，修改内容如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle the text field’s user input via delegate callbacks.</span></span><br><span class="line">    nameTextField.delegate = <span class="keyword">self</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set up views if editing an existing Meal.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> meal = meal &#123;</span><br><span class="line">        navigationItem.title = meal.name</span><br><span class="line">        nameTextField.text   = meal.name</span><br><span class="line">        photoImageView.image = meal.photo</span><br><span class="line">        ratingControl.rating = meal.rating</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable the Save button only if the text field has a valid Meal name.</span></span><br><span class="line">    checkValidMealName()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行app</p>
<p><img src="/images/9-4.png" alt=""></p>
<h5 id="更新unwindToMealList(_:)方法实现增加和更换meals">更新unwindToMealList(_:)方法实现增加和更换meals</h5><p>打开MealTableViewController.swift.找到unwindToMealList(_:)方法，修改为如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">unwindToMealList</span><span class="params">(sender: UIStoryboardSegue)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> sourceViewController = sender.sourceViewController <span class="keyword">as</span>? <span class="type">MealViewController</span>, meal = sourceViewController.meal &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> selectedIndexPath = tableView.indexPathForSelectedRow &#123;</span><br><span class="line">            <span class="comment">// Update an existing meal.</span></span><br><span class="line">            meals[selectedIndexPath.row] = meal</span><br><span class="line">            tableView.reloadRowsAtIndexPaths([selectedIndexPath], withRowAnimation: .<span class="type">None</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Add a new meal.</span></span><br><span class="line">            <span class="keyword">let</span> newIndexPath = <span class="type">NSIndexPath</span>(forRow: meals.<span class="built_in">count</span>, inSection: <span class="number">0</span>)</span><br><span class="line">            meals.append(meal)</span><br><span class="line">            tableView.insertRowsAtIndexPaths([newIndexPath], withRowAnimation: .<span class="type">Bottom</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行app</p>
<p><img src="/images/9-5.png" alt=""></p>
<h3 id="取消已存在的meal的编辑">取消已存在的meal的编辑</h3><h5 id="改变cancel动作的实现">改变cancel动作的实现</h5><p>打开MealViewController.swift，找到cancel(_:)方法，修改为如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">(sender: UIBarButtonItem)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Depending on style of presentation (modal or push presentation), this view controller needs to be dismissed in two different ways.</span></span><br><span class="line">    <span class="keyword">let</span> isPresentingInAddMealMode = presentingViewController <span class="keyword">is</span> <span class="type">UINavigationController</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isPresentingInAddMealMode &#123;</span><br><span class="line">        dismissViewControllerAnimated(<span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        navigationController!.popViewControllerAnimated(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="支持meals_删除">支持meals 删除</h3><h5 id="在table_view中增加编辑按钮">在table view中增加编辑按钮</h5><p>打开MealTableViewController.swift，找到viewDidLoad() 方法，修改为如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use the edit button item provided by the table view controller.</span></span><br><span class="line">    navigationItem.leftBarButtonItem = editButtonItem()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load the sample data.</span></span><br><span class="line">    loadSampleMeals()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行app</p>
<p><img src="/images/9-6.png" alt=""></p>
<h5 id="删除一个meal">删除一个meal</h5><p>打开MealTableViewController.swift，找到tableView(_:commitEditingStyle:forRowAtIndexPath:)方法，修改为<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Override to support editing the table view.</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> editingStyle == .<span class="type">Delete</span> &#123;</span><br><span class="line">        <span class="comment">// Delete the row from the data source</span></span><br><span class="line">        meals.removeAtIndex(indexPath.row)</span><br><span class="line">        tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: .<span class="type">Fade</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> editingStyle == .<span class="type">Insert</span> &#123;</span><br><span class="line">        <span class="comment">// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行app</p>
<p><img src="/images/9-7.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="允许编辑已经存在的Meals">允许编辑已经存在的Meals</h3><h5 id="配置table_view单元">配置table view单元</h5><p>打开Main.storyboard，选择table view cell，按住control并把它拖到m]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[八. 实现导航]]></title>
    <link href="http://swift.idup.club/2015/12/04/8-Implement-navigation/"/>
    <id>http://swift.idup.club/2015/12/04/8-Implement-navigation/</id>
    <published>2015-12-04T03:59:23.000Z</published>
    <updated>2015-12-08T14:57:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="添加一个向前导航">添加一个向前导航</h3><p>现在需要添加meal list到meal scene的导航</p>
<h5 id="增加一个navigation_controller指向meal_list_scene">增加一个navigation controller指向meal list scene</h5><p>打开storyboard，点击scene dock来选择table view controller,保持选择状态依次点击Editor &gt; Embed In &gt; Navigation Controller.</p>
<p><img src="/images/8-1.png" alt=""></p>
<h3 id="为视图添加导航栏">为视图添加导航栏</h3><h5 id="为meal_list配置导航栏">为meal list配置导航栏</h5><p>双击meal list scene的 navigation bar，输入Your meals</p>
<p><img src="/images/8-2.png" alt=""></p>
<p><img src="/images/8-3.png" alt=""></p>
<p>从Object library中选择Bar Button Item，拖放到meal scene的右上角</p>
<p><img src="/images/8-4.png" alt=""></p>
<p>选择它的 Attributes inspector,从菜单中选择Add，这个btton就会变成增加按钮</p>
<p><img src="/images/8-5.png" alt=""></p>
<p>运行虚拟机</p>
<p><img src="/images/8-6.png" alt=""></p>
<h5 id="在meal_scene中添加add按钮">在meal scene中添加add按钮</h5><p>选择add button(+)，按住control键并拖入meal scene中，出现一个Action Segue菜单，选择show选项</p>
<p><img src="/images/8-7.png" alt=""></p>
<p><img src="/images/8-8.png" alt=""></p>
<p><img src="/images/8-9.png" alt=""></p>
<p>运行app,点击add 按钮，并导航至meal scene</p>
<h5 id="改变segue_style">改变segue style</h5><p>选择segue，在它的Attributes inspector中选择 Present Modally，在Identifier标签上选择AddItem</p>
<h5 id="给meal_scene增加一个navigation_controller">给meal scene增加一个navigation controller</h5><p>选择meal scene，依次点击Editor &gt; Embed In &gt; Navigation Controller.</p>
<h5 id="在meal_scene中配置导航栏">在meal scene中配置导航栏</h5><p>双击navigation bar，输入New Meal保存，从 Object library中拖一个 Bar Button Item放在meal scene的导航栏上，在Attributes inspector中选择 Cancel</p>
<p><img src="/images/8-10.png" alt=""></p>
<p>拖拽另一个Bar Button Item放在meal scene的导航栏上，在Attributes inspector上选择save</p>
<p><img src="/images/8-11.png" alt=""></p>
<p>运行app</p>
<p><img src="/images/8-12.png" alt=""></p>
<h3 id="最后确定自动布局的界面">最后确定自动布局的界面</h3><h5 id="更新stack_view的布局">更新stack view的布局</h5><p>点击meal scene中的蔚蓝色区域以选择stack view，在canvas的右下角，打开Resolve Auto Layout Issues菜单，选择Update Constraints</p>
<p><img src="/images/8-13.png" alt=""></p>
<p><img src="/images/8-14.png" alt=""></p>
<h3 id="在Meal_List中存储新的Meals">在Meal List中存储新的Meals</h3><h5 id="在MealViewController中增加一个Meal属性">在MealViewController中增加一个Meal属性</h5><p>打开MealViewController.swift.在ratingControl下增加如下代码</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"><span class="type">This</span> <span class="keyword">value</span> is either passed by <span class="tag">`MealTableViewController</span>` <span class="keyword">in</span> `prepareForSegue(_:sender:)`</span><br><span class="line"><span class="keyword">or</span> constructed <span class="keyword">as</span> part <span class="keyword">of</span> adding a <span class="keyword">new</span> meal.</span><br><span class="line">*/</span><br><span class="line">var meal: <span class="type">Meal</span>?</span><br></pre></td></tr></table></figure>
<h5 id="建立save按钮与MealViewController代码的连接">建立save按钮与MealViewController代码的连接</h5><p>打开storyboard，将save 按钮拖至MealViewController.swift代码的ratingControl属性下面，name设置为saveButton</p>
<p><img src="/images/8-15.png" alt=""></p>
<p><img src="/images/8-16.png" alt=""></p>
<h3 id="创建一个松开_Segue">创建一个松开 Segue</h3><h5 id="在MealViewController中实现prepareForSegue(_:sender:)_方法">在MealViewController中实现prepareForSegue(_:sender:) 方法</h5><p>打开MealViewController.swift，在// MARK: Actions上面，添加</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Navigation</span></span><br><span class="line"><span class="comment">// This method lets you configure a view controller before it's presented.</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">prepareForSegue</span><span class="params">(segue: UIStoryboardSegue, sender: AnyObject?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> saveButton === sender &#123;</span><br><span class="line">        <span class="keyword">let</span> name = nameTextField.text ?? <span class="string">""</span></span><br><span class="line">        <span class="keyword">let</span> photo = photoImageView.image</span><br><span class="line">        <span class="keyword">let</span> rating = ratingControl.rating</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the meal to be passed to MealTableViewController after the unwind segue.</span></span><br><span class="line">        meal = <span class="type">Meal</span>(name: name, photo: photo, rating: rating)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="给MealTableViewController添加动作方法">给MealTableViewController添加动作方法</h5><p>打开MealTableViewController.swift.在最后一个 } 前添加如下代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">unwindToMealList</span><span class="params">(sender: UIStoryboardSegue)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> sourceViewController = sender.sourceViewController <span class="keyword">as</span>? <span class="type">MealViewController</span>, meal = sourceViewController.meal &#123;</span><br><span class="line">        <span class="comment">// Add a new meal.</span></span><br><span class="line">        <span class="keyword">let</span> newIndexPath = <span class="type">NSIndexPath</span>(forRow: meals.<span class="built_in">count</span>, inSection: <span class="number">0</span>)</span><br><span class="line">        meals.append(meal)</span><br><span class="line">        tableView.insertRowsAtIndexPaths([newIndexPath], withRowAnimation: .<span class="type">Bottom</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="将save按钮与unwindToMealList_方法建立连接">将save按钮与unwindToMealList 方法建立连接</h5><p>打开storyboard，按住control键拖拽Save 按钮到meal scene上面的 Exit 按钮，在出现的菜单中选择unwindToMealList:</p>
<p><img src="/images/8-17.png" alt=""></p>
<p><img src="/images/8-18.png" alt=""></p>
<h3 id="当用户没有输入名字时不能存储">当用户没有输入名字时不能存储</h3><h5 id="没有名字，不能使用save按钮">没有名字，不能使用save按钮</h5><p>在MealViewController.swift中找到<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: UITextFieldDelegate</span></span><br></pre></td></tr></table></figure></p>
<p>在这个部分添加另一个方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">textFieldDidBeginEditing</span><span class="params">(textField: UITextField)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Disable the Save button while editing.</span></span><br><span class="line">    saveButton.enabled = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在textFieldDidBeginEditing(_:)方法之后添加另一个方法<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func checkValidMealName() &#123;</span><br><span class="line">    <span class="comment">// Disable the Save button if the text field is empty.</span></span><br><span class="line">    <span class="built_in">let</span> <span class="built_in">text</span> = nameTextField.<span class="built_in">text</span> ?? <span class="string">""</span></span><br><span class="line">    saveButton.enabled = <span class="built_in">!</span><span class="built_in">text</span>.isEmpty</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>找到textFieldDidEndEditing(_:)方法，向其中添加<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">checkValidMealName</span><span class="params">()</span></span></span><br><span class="line">navigationItem<span class="class">.title</span> = textField.text</span><br></pre></td></tr></table></figure></p>
<p>找到viewDidLoad() 方法，向其中添加</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Enable the Save button only if the text field has a valid Meal name.</span></span><br><span class="line"><span class="function"><span class="title">checkValidMealName</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<h3 id="取消新增的meal">取消新增的meal</h3><h5 id="创建并是吸纳一个取消动作方法">创建并是吸纳一个取消动作方法</h5><p>选择Cancel button，将其拖入MealViewController.swift代码区域的// MARK: Navigation下面，name 设置为cancel，type设置为UIBarButtonItem.</p>
<p><img src="/images/8-19.png" alt=""></p>
<p><img src="/images/8-20.png" alt=""></p>
<p>在cancel(_:)中添加<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dismissViewControllerAnimated<span class="list">(<span class="keyword">true</span>, completion: <span class="literal">nil</span>)</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="添加一个向前导航">添加一个向前导航</h3><p>现在需要添加meal list到meal scene的导航</p>
<h5 id="增加一个navigation_controller指向meal_list_scene">增加一个navigation contr]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[七. 创建表视图]]></title>
    <link href="http://swift.idup.club/2015/12/04/7-Create-a-table-view/"/>
    <id>http://swift.idup.club/2015/12/04/7-Create-a-table-view/</id>
    <published>2015-12-04T03:59:11.000Z</published>
    <updated>2015-12-08T14:58:45.000Z</updated>
    <content type="html"><![CDATA[<h3 id="创建开放视图">创建开放视图</h3><p>目前，FoodTracker app只有一个通过view controller管理的视图，还需要创建meals的列表，IOS内置了表视图类UITableView来展示这种项目滑动列表</p>
<h5 id="在storyboard中添加一个表视图">在storyboard中添加一个表视图</h5><p>在Object libray中找到Table View Controller对象，拖拽它把它放置在meal视图的左边，这时就有两个视图，一个用来用来添加meal，一个用来展示meal 列表</p>
<h5 id="将table_view_controller设置为初始视图">将table view controller设置为初始视图</h5><p>拖拽指向view Controller的箭头，将它指向table view controller</p>
<p><img src="/images/7-1.png" alt=""></p>
<p><img src="/images/7-2.png" alt=""></p>
<p>运行虚拟机</p>
<p><img src="/images/7-3.png" alt=""></p>
<h5 id="配置table_view">配置table view</h5><p>在 outline view中选择Table View，打开Size inspector,找到Row Height标签，设置为90</p>
<p><img src="/images/7-4.png" alt=""></p>
<h3 id="设计自定义的表单元">设计自定义的表单元</h3><h5 id="创建UITableViewCell的子类">创建UITableViewCell的子类</h5><p>依次点击File &gt; New &gt; File ，选择ios下面的Source选项，选择 Cocoa Touch Class，点击next，Class中填入Meal,subclass of中选择UITableViewCell，然后一只默认设置到创建结束。</p>
<h5 id="为table_view配置自定义单元">为table view配置自定义单元</h5><p>在outline中选择Table View Cell，打开它的Attributes inspector，找到 Identifier标签，输入MealTableViewCell。找到 Selection标签，选择None，打开 Size inspector，找到Row Height标签，输入90，打开Identity inspector，在Class标签中选择 MealTableViewCell.</p>
<h5 id="为自定义的table单元设计接口">为自定义的table单元设计接口</h5><p>依次点击 Editor &gt; Canvas &gt; Show Bounds Rectangles，</p>
<p><img src="/images/7-5.png" alt=""></p>
<p>在Object library中选择Image View，拖拽它到表单元</p>
<p><img src="/images/7-6.png" alt=""></p>
<p>打开image view的 Attributes inspector,选择 Image标签设置为defaultPhoto，在Object library中选择Label，拖拽它到表单元，挡在image view的右边</p>
<p><img src="/images/7-7.png" alt=""></p>
<p>重新设置label的大小</p>
<p><img src="/images/7-8.png" alt=""></p>
<p>从Object library中选择View ，拖拽到表单元，打开它的Size inspector,设置 Height和Width 分别为40，240，打开它的Identity inspector，设置 Class为RatingControl。打开Attributes inspector，找到 Interaction标签，撤销User Interaction Enabled</p>
<p><img src="/images/7-9.png" alt=""></p>
<p><img src="/images/7-10.png" alt=""></p>
<p>运行虚拟机</p>
<p><img src="/images/7-11.png" alt=""></p>
<h3 id="向项目中添加图片">向项目中添加图片</h3><p>打开 project navigator中的Assets.xcassets，添加一个文件夹，命名为Sample Images，在这个文件夹下添加New Image Set ，向其中添加图片。可以新建多个New Image Set。</p>
<p><img src="/images/7-12.png" alt=""></p>
<h3 id="table单元和代码建立连接">table单元和代码建立连接</h3><h5 id="建立视图和MealTableViewCell-swift代码的连接">建立视图和MealTableViewCell.swift代码的连接</h5><p>拖拽table 单元中的label到MealTableViewCell.swift的代码区，name 设置为nameLabel</p>
<p><img src="/images/7-13.png" alt=""></p>
<p><img src="/images/7-14.png" alt=""></p>
<p>拖拽table单元中的image view到 MealTableViewCell.swift代码区，位置放在刚刚建立的nameLabel属性下面，name设置为photoImageView</p>
<p><img src="/images/7-15.png" alt=""></p>
<p>选择table view单元中的rating control，拖拽它到MealTableViewCell.swift代码区的photoImageView属性下。name设置为ratingControl</p>
<p><img src="/images/7-16.png" alt=""></p>
<p><img src="/images/7-17.png" alt=""></p>
<h3 id="加载初始数据">加载初始数据</h3><h5 id="创建UITableViewController的子类">创建UITableViewController的子类</h5><p>依次点击File &gt; New &gt; File，选择ios下的Source选项，选择Cocoa Touch Class，点击next,Class填入Meal,subclass of填入UITableViewController，确保Also create XIB file设置为unselected状态，点击创建。</p>
<h5 id="加载初始数据-1">加载初始数据</h5><p>在 MealTableViewController.swift代码区的class行下面添加如下代码</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// MARK: Properties</span><br><span class="line"></span><br><span class="line">var meals = [<span class="link_label">Meal</span>](<span class="link_url"></span>)</span><br></pre></td></tr></table></figure>
<p>在viewDidLoad() 方法后面，添加如下方法<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func loadSampleMeals() &#123;</span><br><span class="line">    let photo1 = UIImage(<span class="string">named:</span> <span class="string">"meal1"</span>)!</span><br><span class="line">    let meal1 = Meal(<span class="string">name:</span> <span class="string">"Caprese Salad"</span>, <span class="string">photo:</span> photo1, <span class="string">rating:</span> <span class="number">4</span>)!</span><br><span class="line"></span><br><span class="line">    let photo2 = UIImage(<span class="string">named:</span> <span class="string">"meal2"</span>)!</span><br><span class="line">    let meal2 = Meal(<span class="string">name:</span> <span class="string">"Chicken and Potatoes"</span>, <span class="string">photo:</span> photo2, <span class="string">rating:</span> <span class="number">5</span>)!</span><br><span class="line"></span><br><span class="line">    let photo3 = UIImage(<span class="string">named:</span> <span class="string">"meal3"</span>)!</span><br><span class="line">    let meal3 = Meal(<span class="string">name:</span> <span class="string">"Pasta with Meatballs"</span>, <span class="string">photo:</span> photo3, <span class="string">rating:</span> <span class="number">3</span>)!</span><br><span class="line"></span><br><span class="line">    meals += [meal1, meal2, meal3]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>viewDidLoad()方法添加相关代码加载数据</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load the sample data.</span></span><br><span class="line">    loadSampleMeals()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="呈现数据">呈现数据</h3><h5 id="呈现table_view的部分">呈现table view的部分</h5><p>修改MealTableViewController.swift代码中numberOfSectionsInTableView(_:)方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> meals.<span class="built_in">count</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="配置并呈现table_view中的单元">配置并呈现table view中的单元</h5><p>找到tableviewf方法将其改成如下形式</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="comment">// Table view cells are reused and should be dequeued using a cell identifier.</span></span><br><span class="line">    <span class="keyword">let</span> cellIdentifier = <span class="string">"MealTableViewCell"</span></span><br><span class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCellWithIdentifier(cellIdentifier, forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">MealTableViewCell</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fetches the appropriate meal for the data source layout.</span></span><br><span class="line">    <span class="keyword">let</span> meal = meals[indexPath.row]</span><br><span class="line"></span><br><span class="line">    cell.nameLabel.text = meal.name</span><br><span class="line">    cell.photoImageView.image = meal.photo</span><br><span class="line">    cell.ratingControl.rating = meal.rating</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="将table_view_controller_scene指向MealTableViewController-swift">将table view controller scene指向MealTableViewController.swift</h5><p>点击view controller的scene dock,打开Identity inspector，class标签选择MealTableViewController.</p>
<p><img src="/images/7-18.png" alt=""></p>
<h3 id="准备导航视图">准备导航视图</h3><h5 id="清理工程中无用的项目">清理工程中无用的项目</h5><p>选择Meal Name 标签，并删除它</p>
<p><img src="/images/7-19.png" alt=""></p>
<p><img src="/images/7-20.png" alt=""></p>
<p>打开ViewController.swift，找到 textFieldDidEndEditing(_:)方法，删除方法中的如下代码<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mealNameLabel.<span class="keyword">text</span> = <span class="keyword">textField</span>.<span class="keyword">text</span></span><br></pre></td></tr></table></figure></p>
<p>删除ViewController.swift中的<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mealNameLabel: <span class="type">UILabel</span>!</span><br></pre></td></tr></table></figure></p>
<h5 id="重命名ViewController-swift文件">重命名ViewController.swift文件</h5><p>点击ViewController.swift，重命名为MealViewController.swift，将代码区的类声明作如下修改</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MealViewController</span>: <span class="typename">UIViewController</span>, <span class="typename">UITextFieldDelegate</span>, <span class="typename">UIImagePickerControllerDelegate</span>, <span class="typename">UINavigationControllerDelegate &#123;</span></span></span><br></pre></td></tr></table></figure>
<p>在文件的上面部分将ViewController.swift 改为MealViewController.swift.</p>
<p>点击meal secen的scene dock，打开Identity inspector，将class改为MealViewController</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="创建开放视图">创建开放视图</h3><p>目前，FoodTracker app只有一个通过view controller管理的视图，还需要创建meals的列表，IOS内置了表视图类UITableView来展示这种项目滑动列表</p>
<h5 id="在story]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[六. 定义数据模型]]></title>
    <link href="http://swift.idup.club/2015/12/04/6-Define-your-data-model/"/>
    <id>http://swift.idup.club/2015/12/04/6-Define-your-data-model/</id>
    <published>2015-12-04T03:58:51.000Z</published>
    <updated>2015-12-08T14:59:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="创建数据模型">创建数据模型</h3><p>现在需要创建一个数据模型去存储 meal scene呈现的信息</p>
<h5 id="创建一个简单的数据模型类">创建一个简单的数据模型类</h5><p>依次点击File &gt; New &gt; File，选择ios下的source选项，选择Swift File,点击next，相关配置如下，点击完成，就创建了一个名为Meal.swift的文件</p>
<p><img src="/images/6-1.png" alt=""></p>
<h5 id="为meal定义一个数据模型">为meal定义一个数据模型</h5><p>打开Meal.swift.将import Foundation改为import UIKit</p>
<p>在import声明下，添加如下代码<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Meal &#123;</span><br><span class="line">    <span class="comment">// MARK: Properties</span></span><br><span class="line"></span><br><span class="line">    var <span class="built_in">name</span>: String</span><br><span class="line">    var photo: UIImage?</span><br><span class="line">    var <span class="built_in">rating</span>: Int</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MARK: Initialization</span></span><br><span class="line"></span><br><span class="line">init?(<span class="built_in">name</span>: String, photo: UIImage?, <span class="built_in">rating</span>: Int) &#123;</span><br><span class="line">    <span class="comment">// Initialize stored properties.</span></span><br><span class="line">    self.<span class="built_in">name</span> = <span class="built_in">name</span></span><br><span class="line">    self.photo = photo</span><br><span class="line">    self.<span class="built_in">rating</span> = <span class="built_in">rating</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialization should fail if there is no name or if the rating is negative.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">name</span>.isEmpty || <span class="built_in">rating</span> &lt; <span class="number">0</span> &#123;</span><br><span class="line">        return <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="测试数据">测试数据</h3><p>定义了数据模型，还没有完全并入你的app,你也不能保证所有的实现都是正确的，这时就可以通过单元测试来检验代码的正确性。</p>
<h5 id="查看单元测试文件">查看单元测试文件</h5><p><img src="/images/6-2.png" alt=""></p>
<h5 id="编写单元测试">编写单元测试</h5><p>打开FoodTrackerTests.swift文件，删除模板测试代码，修改为如下测试代码</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tests to confirm that the Meal initializer returns when no name or a negative rating is provided.</span></span><br><span class="line">func testMealInitialization() &#123;</span><br><span class="line">    <span class="comment">// Success case.</span></span><br><span class="line">    let potentialItem = Meal(<span class="string">name:</span> <span class="string">"Newest meal"</span>, <span class="string">photo:</span> nil, <span class="string">rating:</span> <span class="number">5</span>)</span><br><span class="line">    XCTAssertNotNil(potentialItem)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Failure cases.</span></span><br><span class="line">    let noName = Meal(<span class="string">name:</span> <span class="string">""</span>, <span class="string">photo:</span> nil, <span class="string">rating:</span> <span class="number">0</span>)</span><br><span class="line">    XCTAssertNil(noName, <span class="string">"Empty name is invalid"</span>)</span><br><span class="line"></span><br><span class="line">    let badRating = Meal(<span class="string">name:</span> <span class="string">"Really bad rating"</span>, <span class="string">photo:</span> nil, <span class="string">rating:</span> -<span class="number">1</span>)</span><br><span class="line">    XCTAssertNotNil(badRating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="运行testMealInitialization()_单元测试">运行testMealInitialization() 单元测试</h5><p>在FoodTrackerTests.swift文件中找到testMealInitialization()单元，在测试名字左边找到一个棱形形状的标签，点击标签运行单元测试。</p>
<p><img src="/images/6-3.png" alt=""></p>
<h5 id="修改测试案例">修改测试案例</h5><p>找到testMealInitialization()的最后一行，修改为</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">XCTAssertNil</span><span class="params">(badRating, <span class="string">"Negative ratings are invalid, be positive"</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>重新运行，所有样例都能测试通过</p>
<p><img src="/images/6-4.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="创建数据模型">创建数据模型</h3><p>现在需要创建一个数据模型去存储 meal scene呈现的信息</p>
<h5 id="创建一个简单的数据模型类">创建一个简单的数据模型类</h5><p>依次点击File &gt; New &gt; File，选择io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[五. 实现自定义控件]]></title>
    <link href="http://swift.idup.club/2015/12/04/5-Implement-a-custom-control/"/>
    <id>http://swift.idup.club/2015/12/04/5-Implement-a-custom-control/</id>
    <published>2015-12-04T03:58:40.000Z</published>
    <updated>2015-12-08T14:59:40.000Z</updated>
    <content type="html"><![CDATA[<h3 id="创建自定义视图">创建自定义视图</h3><p>点击File &gt; New &gt; File ，选择ios下的source选项，选择Cocoa Touch Class，点击next，Class设置为RatingControl，“Subclass of”选择UIView,Language选择Swift</p>
<p><img src="/images/5-1.png" alt=""></p>
<p>在RatingControl.swift代码区的class里添加代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="显示自定义视图">显示自定义视图</h3><p>从Object library中拖拽一个View,将其放置在image view下面，打开它的Size inspector，Intrinsic Size标签设置为Placeholder，宽和高分别设置为44和240,打开它的 Identity inspector，class标签选择RatingControl.</p>
<h3 id="向视图添加button按钮">向视图添加button按钮</h3><p>在RatingControl.swift代码区添加如下代码，用于创建一个红色按钮<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">required init?(coder aDecoder: NSCoder) &#123;</span><br><span class="line">    <span class="keyword">super</span>.init(<span class="string">coder:</span> aDecoder)</span><br><span class="line"></span><br><span class="line">    let button = UIButton(<span class="string">frame:</span> CGRect(<span class="string">x:</span> <span class="number">0</span>, <span class="string">y:</span> <span class="number">0</span>, <span class="string">width:</span> <span class="number">44</span>, <span class="string">height:</span> <span class="number">44</span>))</span><br><span class="line">    button.backgroundColor = UIColor.redColor()</span><br><span class="line">    addSubview(button)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调整红色按钮的布局，重写intrinsicContentSize方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">intrinsicContentSize</span><span class="params">()</span></span> -&gt; <span class="type">CGSize</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">CGSize</span>(width: <span class="number">240</span>, height: <span class="number">44</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行模拟器</p>
<p><img src="/images/5-2.png" alt=""></p>
<p>为了向button按钮添加动作，在 RatingControl.swift代码区最后一个 } 前添加如下代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Button Action</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">ratingButtonTapped</span><span class="params">(button: UIButton)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Button pressed 👍"</span>)</span><br></pre></td></tr></table></figure>
<p>修改init?(coder:)函数如下</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">required init?(coder aDecoder: NSCoder) &#123;</span><br><span class="line">    <span class="keyword">super</span>.init(<span class="string">coder:</span> aDecoder)</span><br><span class="line"></span><br><span class="line">    let button = UIButton(<span class="string">frame:</span> CGRect(<span class="string">x:</span> <span class="number">0</span>, <span class="string">y:</span> <span class="number">0</span>, <span class="string">width:</span> <span class="number">44</span>, <span class="string">height:</span> <span class="number">44</span>))</span><br><span class="line">    button.backgroundColor = UIColor.redColor()</span><br><span class="line">    button.addTarget(self, <span class="string">action:</span> <span class="string">"ratingButtonTapped:"</span>, <span class="string">forControlEvents:</span> .TouchDown)</span><br><span class="line">    addSubview(button)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义属性和5个button，重写layoutSubviews()方法</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">super.init(coder</span>: <span class="string">aDecoder)</span></span><br><span class="line"></span><br><span class="line"><span class="cpp">   <span class="keyword">for</span> _ in <span class="number">0.</span>.&lt;<span class="number">5</span> &#123;</span><br><span class="line">       let button = UIButton(frame: CGRect(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">44</span>, height: <span class="number">44</span>))</span><br><span class="line">       button.backgroundColor = UIColor.redColor()</span><br><span class="line">       button.addTarget(self, action: <span class="string">"ratingButtonTapped:"</span>, forControlEvents: .TouchDown)</span><br><span class="line">       ratingButtons += [button]</span><br><span class="line">       addSubview(button)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">override func <span class="title">layoutSubviews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       var buttonFrame = CGRect(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">44</span>, height: <span class="number">44</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Offset each button's origin by the length of the button plus spacing.</span></span><br><span class="line">       <span class="keyword">for</span> (index, button) in ratingButtons.enumerate() &#123;</span><br><span class="line">           buttonFrame.origin.x = CGFloat(index * (<span class="number">44</span> + <span class="number">5</span>))</span><br><span class="line">           button.frame = buttonFrame</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="为button大小声明约束,相应代码修改如下">为button大小声明约束,相应代码修改如下</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Set the button's width and height to a square the size of the frame's height.</span></span><br><span class="line">    <span class="keyword">let</span> buttonSize = <span class="type">Int</span>(frame.size.height)</span><br><span class="line">    <span class="keyword">var</span> buttonFrame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: buttonSize, height: buttonSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Offset each button's origin by the length of the button plus some spacing.</span></span><br><span class="line">    <span class="keyword">for</span> (index, button) <span class="keyword">in</span> ratingButtons.<span class="built_in">enumerate</span>() &#123;</span><br><span class="line">        buttonFrame.origin.x = <span class="type">CGFloat</span>(index * (buttonSize + <span class="number">5</span>))</span><br><span class="line">        button.frame = buttonFrame</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">override func intrinsicContentSize() -&gt; CGSize &#123;</span><br><span class="line">    let buttonSize = Int(frame.<span class="built_in">size</span>.<span class="variable">height</span>)</span><br><span class="line">    let <span class="variable">width</span> = (buttonSize + spacing) * stars</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CGSize(<span class="variable">width</span>: <span class="variable">width</span>, <span class="variable">height</span>: buttonSize)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> button = <span class="type">UIButton</span>()</span><br><span class="line">        button.backgroundColor = <span class="type">UIColor</span>.redColor()</span><br><span class="line">        button.addTarget(<span class="keyword">self</span>, action: <span class="string">"ratingButtonTapped:"</span>, forControlEvents: .<span class="type">TouchDown</span>)</span><br><span class="line">        ratingButtons += [button]</span><br><span class="line">        addSubview(button)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="向Buttons中添加star图片">向Buttons中添加star图片</h3><p>在project navigator中选择Assets.xcassets,点击(+)按钮并创建一个文件夹，将文件夹命名Rating Images。在这个文件夹下创建两个Image Set，分别命名为emptyStar， filledStar，并将图片拖拽到相应位置</p>
<p><img src="/images/5-3.png" alt=""></p>
<p>为buttons设置成星星图片，修改RatingControl.swift中代码</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">required init?(coder aDecoder: NSCoder) &#123;</span><br><span class="line">    <span class="keyword">super</span>.init(<span class="string">coder:</span> aDecoder)</span><br><span class="line"></span><br><span class="line">    let emptyStarImage = UIImage(<span class="string">named:</span> <span class="string">"emptyStar"</span>)</span><br><span class="line">    let filledStarImage = UIImage(<span class="string">named:</span> <span class="string">"filledStar"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="number">5</span> &#123;</span><br><span class="line">        let button = UIButton()</span><br><span class="line"></span><br><span class="line">        button.setImage(emptyStarImage, <span class="string">forState:</span> .Normal)</span><br><span class="line">        button.setImage(filledStarImage, <span class="string">forState:</span> .Selected)</span><br><span class="line">        button.setImage(filledStarImage, <span class="string">forState:</span> [.Highlighted, .Selected])</span><br><span class="line"></span><br><span class="line">        button.adjustsImageWhenHighlighted = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        button.addTarget(self, <span class="string">action:</span> <span class="string">"ratingButtonTapped:"</span>, <span class="string">forControlEvents:</span> .TouchDown)</span><br><span class="line">        ratingButtons += [button]</span><br><span class="line">        addSubview(button)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行模拟器</p>
<p><img src="/images/5-3.png" alt=""></p>
<h3 id="实现Button动作">实现Button动作</h3><p>用户需要点击星星图标来作出选择，需要重新设计rratingButtonTapped(_:)方法</p>
<p>在RatingControl.swift代码区域添加updateButtonSelectionStates()方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">updateButtonSelectionStates</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (index, button) <span class="keyword">in</span> ratingButtons.<span class="built_in">enumerate</span>() &#123;</span><br><span class="line">        <span class="comment">// If the index of a button is less than the rating, that button shouldn't be selected.</span></span><br><span class="line">        button.selected = index &lt; rating</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在ratingButtonTapped(_:)方法和layoutSubviews()中分别调用这个方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">ratingButtonTapped</span><span class="params">(button: UIButton)</span></span> &#123;</span><br><span class="line">    rating = ratingButtons.indexOf(button)! + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    updateButtonSelectionStates()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Set the button's width and height to a square the size of the frame's height.</span></span><br><span class="line">    <span class="keyword">let</span> buttonSize = <span class="type">Int</span>(frame.size.height)</span><br><span class="line">    <span class="keyword">var</span> buttonFrame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: buttonSize, height: buttonSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Offset each button's origin by the length of the button plus some spacing.</span></span><br><span class="line">    <span class="keyword">for</span> (index, button) <span class="keyword">in</span> ratingButtons.<span class="built_in">enumerate</span>() &#123;</span><br><span class="line">        buttonFrame.origin.x = <span class="type">CGFloat</span>(index * (buttonSize + <span class="number">5</span>))</span><br><span class="line">        button.frame = buttonFrame</span><br><span class="line">    &#125;</span><br><span class="line">    updateButtonSelectionStates()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在// MARK: Properties区域下，更新rating属性</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> rating</span> = <span class="number">0</span> &#123;</span><br><span class="line">didSet &#123;</span><br><span class="line">    setNeedsLayout()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行模拟器</p>
<p><img src="/images/5-5.png" alt=""></p>
<h3 id="增加Spacing和Number属性">增加Spacing和Number属性</h3><p>在// MARK: Properties下增加两个属性,</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> spacing</span> = <span class="number">5</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> stars</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h3 id="将比率控制和视图控制器建立连接">将比率控制和视图控制器建立连接</h3><p>将canvas中的rating control拖拽至 ViewController.swift中photoImageView 属性下</p>
<p><img src="/images/5-6.png" alt=""></p>
<p>设置如图</p>
<p><img src="/images/5-7.png" alt=""></p>
<h3 id="清理工程项目">清理工程项目</h3><p>现在快要完成app的设计了，但是现在需要对之前的工作做一个清理，因为app实现了更高级的功能，而之前的功能我们需要删除一些。</p>
<p>选择Storyboard 中的Set Default Label Text 按钮，按下 Delete键去删除它</p>
<p>点击outline目录下的Stack View对象，打开Attributes inspector.找到Alignment标签，将其设置为Center，stack view中的元素就会水平居中</p>
<p><img src="/images/5-8.png" alt=""></p>
<p>打开ViewController.swift，删除setDefaultLabelText(_:)方法</p>
<p>运行模拟器</p>
<p><img src="/images/5-9.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="创建自定义视图">创建自定义视图</h3><p>点击File &gt; New &gt; File ，选择ios下的source选项，选择Cocoa Touch Class，点击next，Class设置为RatingControl，“Subclass of”选择U]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[四. 编写视图控制器]]></title>
    <link href="http://swift.idup.club/2015/12/04/4-Work-with-view-controllers/"/>
    <id>http://swift.idup.club/2015/12/04/4-Work-with-view-controllers/</id>
    <published>2015-12-04T03:58:26.000Z</published>
    <updated>2015-12-07T12:45:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="增加一张Meal图片">增加一张Meal图片</h3><p>从Object library中拖拽一个 image view放入stack view中的button下面。</p>
<p><img src="/images/4-1.png" alt=""></p>
<p>在工具栏中选择 Size inspector菜单，将Intrinsic Size标签设置为Placeholder，并将宽度和高度设置为320</p>
<p><img src="/images/4-2.png" alt=""></p>
<p>给图片增加约束条件，Pin菜单中勾选 Aspect Ratio.</p>
<p><img src="/images/4-3.png" alt=""></p>
<p> 在工具栏的Attributes inspector菜单下找到Interaction标签，勾选User Interaction Enabled。</p>
<h3 id="展示默认图片">展示默认图片</h3><p>在project navigator中选择Assets.xcassets。在左底角点击+符号，把图片拖入image set中的2*槽中，Attributes inspector中选择image，在列表中选择刚才添加的图片defaultPhoto。运行模拟器。</p>
<p><img src="/images/4-4.png" alt=""></p>
<h3 id="连接代码与图片">连接代码与图片</h3><p>拖拽image view到ViewController.swift代码区，name为photoImageView</p>
<p><img src="/images/4-5.png" alt=""></p>
<h3 id="创建手势识别">创建手势识别</h3><p>从Object Library中拖拽一个Object Library，将其放在image view上添加一个点击手势识别。</p>
<p><img src="/images/4-6.png" alt=""></p>
<p><img src="/images/4-7.png" alt=""></p>
<h3 id="将手势识别连接到代码区">将手势识别连接到代码区</h3><p>拖拽 gesture recognizer到ViewController.swift代码区，name设置为selectImageFromPhotoLibrary，type设置为UITapGestureRecognizer</p>
<p><img src="/images/4-8.png" alt=""></p>
<p><img src="/images/4-9.png" alt=""></p>
<h3 id="创建图像选择器来响应用户点击">创建图像选择器来响应用户点击</h3><p>在ViewController.swift代码区中修改相应代码<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="typename">UIViewController</span>, <span class="typename">UITextFieldDelegate</span>, <span class="typename">UIImagePickerControllerDelegate</span>, <span class="typename">UINavigationControllerDelegate &#123;</span></span></span><br></pre></td></tr></table></figure></p>
<p>修改 selectImageFromPhotoLibrary(_:)方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">selectImageFromPhotoLibrary</span><span class="params">(sender: UITapGestureRecognizer)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Hide the keyboard.</span></span><br><span class="line">    nameTextField.resignFirstResponder()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// UIImagePickerController is a view controller that lets a user pick media from their photo library.</span></span><br><span class="line">    <span class="keyword">let</span> imagePickerController = <span class="type">UIImagePickerController</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only allow photos to be picked, not taken.</span></span><br><span class="line">    imagePickerController.sourceType = .<span class="type">PhotoLibrary</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure ViewController is notified when the user picks an image.</span></span><br><span class="line">    imagePickerController.delegate = <span class="keyword">self</span></span><br><span class="line"></span><br><span class="line">    presentViewController(imagePickerController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现两个委托方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">imagePickerControllerDidCancel</span><span class="params">(picker: UIImagePickerController)</span></span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">imagePickerController</span><span class="params">(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject])</span></span></span><br></pre></td></tr></table></figure>
<p>imagePickerControllerDidCancel(_:) 方法内容<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">imagePickerControllerDidCancel</span><span class="params">(picker: UIImagePickerController)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Dismiss the picker if the user canceled.</span></span><br><span class="line">    dismissViewControllerAnimated(<span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>imagePickerController(_:didFinishPickingMediaWithInfo) 方法内容</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">imagePickerController</span><span class="params">(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject])</span></span> &#123;</span><br><span class="line">    <span class="comment">// The info dictionary contains multiple representations of the image, and this uses the original.</span></span><br><span class="line">    <span class="keyword">let</span> selectedImage = info[<span class="type">UIImagePickerControllerOriginalImage</span>] <span class="keyword">as</span>! <span class="type">UIImage</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set photoImageView to display the selected image.</span></span><br><span class="line">    photoImageView.image = selectedImage</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dismiss the picker.</span></span><br><span class="line">    dismissViewControllerAnimated(<span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行模拟器</p>
<p><img src="/images/4-10.png" alt=""></p>
<p>从电脑中向模拟器中拖拽图片，图片就会被添加进模拟器中</p>
<p><img src="/images/4-11.png" alt=""></p>
<p><img src="/images/4-12.png" alt=""></p>
<p>点击image view,选择向模拟器中添加的图片</p>
<p><img src="/images/4-13.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="增加一张Meal图片">增加一张Meal图片</h3><p>从Object library中拖拽一个 image view放入stack view中的button下面。</p>
<p><img src="/images/4-1.png" alt=""></p>
<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[三. 连接界面与代码]]></title>
    <link href="http://swift.idup.club/2015/12/04/3-Connect-the-UI-to-code/"/>
    <id>http://swift.idup.club/2015/12/04/3-Connect-the-UI-to-code/</id>
    <published>2015-12-04T03:18:57.000Z</published>
    <updated>2015-12-07T12:40:08.000Z</updated>
    <content type="html"><![CDATA[<h3 id="为UI元素创建Outlets">为UI元素创建Outlets</h3><p>点击toolbar中的Assistant按钮，将assistant editor从Preview状态转换为Automatic状态。</p>
<p><img src="/images/3-1.png" alt=""></p>
<p>在代码区找到</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="typename">UIViewController</span></span></span><br></pre></td></tr></table></figure>
<p>在这行下添加标记,这个标记并没有什么用处，主要用来提供一些有用的文本信息</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Properties</span></span><br></pre></td></tr></table></figure>
<p>在storyboard中选择text field,按住control键将它拖拽到代码区刚才添加的标记下面一行</p>
<p><img src="/images/3-2.png" alt=""></p>
<p>在出现的对话框中输入nameTextField</p>
<p><img src="/images/3-3.png" alt=""></p>
<p>点击链接，在代码区出现如下代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> nameTextField: <span class="type">UITextField</span>!</span><br></pre></td></tr></table></figure>
<p>以相同方式将label拖拽到代码区</p>
<p><img src="/images/3-4.png" alt=""></p>
<h3 id="定义执行操作">定义执行操作</h3><p>在 ViewController.swift代码区域中，在最后一个 } 前添加</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Actions</span></span><br></pre></td></tr></table></figure>
<p>将Set Default Label Text按钮拖拽至标记下面</p>
<p><img src="/images/3-5.png" alt=""></p>
<p>在方法中添加代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">setDefaultLabelText</span><span class="params">(sender:</span><br><span class="line">   UIButton)</span></span> &#123;</span><br><span class="line">    mealNameLabel.text = <span class="string">"Default Text"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>标签值被修改</p>
<p><img src="/images/3-6.png" alt=""></p>
<h3 id="获取用户输入">获取用户输入</h3><p>采用UITextFieldDelegate协议，在UIViewController后添加UITextFieldDelegate</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="typename">UIViewController</span>,</span><br><span class="line"><span class="typename">UITextFieldDelegate &#123;</span></span></span><br></pre></td></tr></table></figure>
<p>设置ViewController作为nameTextField的委托, 对viewDidLoad()修改</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    <span class="comment">// Handle the text field’s user input through delegate callbacks.</span></span><br><span class="line">    nameTextField.delegate = <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现UITextFieldDelegate协议方法textFieldShouldReturn(_:) 和 textFieldDidEndEditing(_:)</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func textFieldDidEndEditing(<span class="keyword">textField</span>: UITextField) &#123;</span><br><span class="line">    mealNameLabel.<span class="keyword">text</span> = <span class="keyword">textField</span>.<span class="keyword">text</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func textFieldDidEndEditing(<span class="keyword">textField</span>: UITextField) &#123;</span><br><span class="line">    mealNameLabel.<span class="keyword">text</span> = <span class="keyword">textField</span>.<span class="keyword">text</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行模拟器查看结果</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="为UI元素创建Outlets">为UI元素创建Outlets</h3><p>点击toolbar中的Assistant按钮，将assistant editor从Preview状态转换为Automatic状态。</p>
<p><img src="/images/3-1]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[二. 创建基本用户界面]]></title>
    <link href="http://swift.idup.club/2015/12/04/2-Build-a-basic-UI/"/>
    <id>http://swift.idup.club/2015/12/04/2-Build-a-basic-UI/</id>
    <published>2015-12-04T03:11:31.000Z</published>
    <updated>2015-12-07T12:41:16.000Z</updated>
    <content type="html"><![CDATA[<h3 id="打开Storyboard">打开Storyboard</h3><p><img src="/images/2-1.png" alt="打开Storyboard"></p>
<h3 id="添加文本框（Text_Field）">添加文本框（Text Field）</h3><p>从Object library中拖拽一个文本框到Storyboard的 scene中,重新设置文本框大小。</p>
<p><img src="/images/2-2.png" alt="添加文本框"></p>
<h3 id="设置文本占位符">设置文本占位符</h3><p>打开工具框中的 Attributes inspector，找到Placeholder标签，在其中输入Enter meal name。</p>
<p><img src="/images/2-3.png" alt="设置占位符"></p>
<h3 id="设置文本框键盘">设置文本框键盘</h3><p>在Attributes inspector中找到Return Key标签，将其设置为Done,并在Auto-enable Return Key复选框上打上勾。</p>
<h3 id="添加标签（Label）">添加标签（Label）</h3><p>从Object library中拖拽一个label到scene中，双击它，在其中输入Meal Name.</p>
<p><img src="/images/2-4.png" alt="添加标签"></p>
<h3 id="添加按钮（Button）">添加按钮（Button）</h3><p>从Object library中拖拽一个button到scene中，双击它，在其中输入Set Default Label Text.</p>
<p><img src="/images/2-5.png" alt="添加按钮"></p>
<h3 id="自动布局">自动布局</h3><p>在按住shift的情况下点击label,button,和textfield.点击canvas底部的Stack按钮</p>
<p><img src="/images/2-6.png" alt="Stack"></p>
<p>Xcode将会将所有UI元素包裹在一个stack view中</p>
<p><img src="/images/2-7.png" alt="Stack"></p>
<p>在canvas的右下角，打开Pin菜单，可以修改界面的布局位置</p>
<p><img src="/images/2-8.png" alt="Pin"></p>
<p>修改完成后</p>
<p><img src="/images/2-9.png" alt="Pin"></p>
<p>需要调整text field的大小，在scene中选择text field,打开Pin菜单，将右边的box中输入0.</p>
<p><img src="/images/2-10.png" alt="Pin"></p>
<p>在工具栏中选择Size inspector按钮,将标签Intrinsic Size的属性设置为Placeholder。</p>
<p><img src="/images/2-11.png" alt="size"></p>
<p>最终的结果</p>
<p><img src="/images/2-12.png" alt="ui"></p>
<p>运行模拟器</p>
<p><img src="/images/2-13.png" alt="simulator"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="打开Storyboard">打开Storyboard</h3><p><img src="/images/2-1.png" alt="打开Storyboard"></p>
<h3 id="添加文本框（Text_Field）">添加文本框（Text Field）</h]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[一. 创建工程]]></title>
    <link href="http://swift.idup.club/2015/12/04/1-Jump-Right-in/"/>
    <id>http://swift.idup.club/2015/12/04/1-Jump-Right-in/</id>
    <published>2015-12-03T16:19:45.000Z</published>
    <updated>2015-12-05T06:50:44.000Z</updated>
    <content type="html"><![CDATA[<p>开始开发iOS应用（Start Developing iOS Apps）是学习iPhone和iPad应用开发的起点。</p>
<h3 id="关于本课程">关于本课程</h3><p>通过本课程，你将开发一个简单的饮食追踪应用FoodTracker。</p>
<p><img src="/images/1-1.png" alt="FoodTracker App"></p>
<h3 id="获取工具">获取工具</h3><p>用当前最新的技术进行iOS应用开发首先需要相应的软硬件设备，包括一台Mac电脑（安装OS X 10.10或更新版本的操作系统）和最新版本的Xcode。Xcode可免费从App Store下载。</p>
<h3 id="创建工程">创建工程</h3><p><img src="/images/1-2.png" alt="新建工程"></p>
<p><img src="/images/1-3.png" alt="选择工程类型"></p>
<p><img src="/images/1-4.png" alt="输入工程参数"></p>
<p><img src="/images/1-5.png" alt="创建成功"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开始开发iOS应用（Start Developing iOS Apps）是学习iPhone和iPad应用开发的起点。</p>
<h3 id="关于本课程">关于本课程</h3><p>通过本课程，你将开发一个简单的饮食追踪应用FoodTracker。</p>
<p><img ]]>
    </summary>
    
  </entry>
  
</feed>
